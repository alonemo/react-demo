{"ast":null,"code":"var _jsxFileName = \"/Users/dima/Desktop/REACT Course Udemy/food-order-app/src/components/UI/Input.js\";\nimport React from 'react';\nimport classes from './Input.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Input = /*#__PURE__*/React.forwardRef(_c = (props, ref) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.input,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.input.id,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: ref,\n      ...props.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}); // <input {...props.input}/> -- this is a nice little trick\n// This ensures that all the key value pairs in this input object which we recieve on props.input\n// are added as props to input\n// So if input object here is an object that for example has {type: 'text'} then this code {...props.input}\n// would make sure that type equals text if being added\n// This is how that works\n// It's simply a convenient way of making this input HIGHLY CONFIGURABLE from outside this component\n\n_c2 = Input;\nexport default Input;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Input$React.forwardRef\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"names":["React","classes","Input","forwardRef","props","ref","input","id","label"],"sources":["/Users/dima/Desktop/REACT Course Udemy/food-order-app/src/components/UI/Input.js"],"sourcesContent":["import React from 'react';\nimport classes from './Input.module.css';\nconst Input = React.forwardRef((props, ref) => {\n  return (\n    <div className={classes.input}>\n      <label htmlFor={props.input.id}>{props.label}</label>\n      <input ref={ref} {...props.input} />\n    </div>\n  );\n});\n\n// <input {...props.input}/> -- this is a nice little trick\n// This ensures that all the key value pairs in this input object which we recieve on props.input\n// are added as props to input\n// So if input object here is an object that for example has {type: 'text'} then this code {...props.input}\n// would make sure that type equals text if being added\n// This is how that works\n// It's simply a convenient way of making this input HIGHLY CONFIGURABLE from outside this component\n\nexport default Input;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;;AACA,MAAMC,KAAK,gBAAGF,KAAK,CAACG,UAAN,MAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;EAC7C,oBACE;IAAK,SAAS,EAAEJ,OAAO,CAACK,KAAxB;IAAA,wBACE;MAAO,OAAO,EAAEF,KAAK,CAACE,KAAN,CAAYC,EAA5B;MAAA,UAAiCH,KAAK,CAACI;IAAvC;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAO,GAAG,EAAEH,GAAZ;MAAA,GAAqBD,KAAK,CAACE;IAA3B;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CAPa,CAAd,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;;MAfMJ,K;AAiBN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}
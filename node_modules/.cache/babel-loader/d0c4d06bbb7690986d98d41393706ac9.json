{"ast":null,"code":"var _jsxFileName = \"/Users/dima/Desktop/REACT Course Udemy/food-order-app/src/components/UI/Input.js\";\nimport classes from './Input.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.input,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.input.id,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...props.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 5\n  }, this);\n}; // <input {...props.input}/> -- this is a nice little trick\n// This ensures that all the key value pairs in this input object which we recieve on props.input\n// are added as props to input\n// So if input object here is an object that for example has {type: 'text'} then this code {...props.input}\n// would make sure that type equals text if being added\n// This is how that works\n// It's simply a convenient way of making this input HIGHLY CONFIGURABLE from outside this component\n\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["classes","Input","props","input","id","label"],"sources":["/Users/dima/Desktop/REACT Course Udemy/food-order-app/src/components/UI/Input.js"],"sourcesContent":["import classes from './Input.module.css';\nconst Input = props => {\n  return (\n    <div className={classes.input}>\n      <label htmlFor={props.input.id}>{props.label}</label>\n      <input {...props.input}/>\n    </div>\n  );\n};\n\n// <input {...props.input}/> -- this is a nice little trick\n// This ensures that all the key value pairs in this input object which we recieve on props.input\n// are added as props to input\n// So if input object here is an object that for example has {type: 'text'} then this code {...props.input}\n// would make sure that type equals text if being added\n// This is how that works\n// It's simply a convenient way of making this input HIGHLY CONFIGURABLE from outside this component\n\nexport default Input;\n"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,oBAApB;;;AACA,MAAMC,KAAK,GAAGC,KAAK,IAAI;EACrB,oBACE;IAAK,SAAS,EAAEF,OAAO,CAACG,KAAxB;IAAA,wBACE;MAAO,OAAO,EAAED,KAAK,CAACC,KAAN,CAAYC,EAA5B;MAAA,UAAiCF,KAAK,CAACG;IAAvC;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,sBAAWH,KAAK,CAACC;IAAjB;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CAPD,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAfMF,K;AAiBN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}